#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class PlateSmart : System.Data.Linq.DataContext
{

    private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertALERT_ACTION_TYPES(ALERT_ACTION_TYPES instance);
    partial void UpdateALERT_ACTION_TYPES(ALERT_ACTION_TYPES instance);
    partial void DeleteALERT_ACTION_TYPES(ALERT_ACTION_TYPES instance);
    partial void InsertALERT_TYPES(ALERT_TYPES instance);
    partial void UpdateALERT_TYPES(ALERT_TYPES instance);
    partial void DeleteALERT_TYPES(ALERT_TYPES instance);
    partial void InsertALERTS(ALERTS instance);
    partial void UpdateALERTS(ALERTS instance);
    partial void DeleteALERTS(ALERTS instance);
    partial void InsertHOTLIST(HOTLIST instance);
    partial void UpdateHOTLIST(HOTLIST instance);
    partial void DeleteHOTLIST(HOTLIST instance);
    partial void InsertHOTLIST_TYPES(HOTLIST_TYPES instance);
    partial void UpdateHOTLIST_TYPES(HOTLIST_TYPES instance);
    partial void DeleteHOTLIST_TYPES(HOTLIST_TYPES instance);
    partial void InsertPLATES(PLATES instance);
    partial void UpdatePLATES(PLATES instance);
    partial void DeletePLATES(PLATES instance);
    partial void InsertROLE_TYPES(ROLE_TYPES instance);
    partial void UpdateROLE_TYPES(ROLE_TYPES instance);
    partial void DeleteROLE_TYPES(ROLE_TYPES instance);
    partial void InsertSTATE_CODES(STATE_CODES instance);
    partial void UpdateSTATE_CODES(STATE_CODES instance);
    partial void DeleteSTATE_CODES(STATE_CODES instance);
    partial void InsertUSERS(USERS instance);
    partial void UpdateUSERS(USERS instance);
    partial void DeleteUSERS(USERS instance);
    #endregion

    public PlateSmart(string connection) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public PlateSmart(System.Data.IDbConnection connection) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public PlateSmart(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public PlateSmart(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public System.Data.Linq.Table<ALERT_ACTION_TYPES> ALERT_ACTION_TYPES
    {
        get
        {
            return this.GetTable<ALERT_ACTION_TYPES>();
        }
    }

    public System.Data.Linq.Table<ALERT_TYPES> ALERT_TYPES
    {
        get
        {
            return this.GetTable<ALERT_TYPES>();
        }
    }

    public System.Data.Linq.Table<ALERTS> ALERTS
    {
        get
        {
            return this.GetTable<ALERTS>();
        }
    }

    public System.Data.Linq.Table<HOTLIST> HOTLIST
    {
        get
        {
            return this.GetTable<HOTLIST>();
        }
    }

    public System.Data.Linq.Table<HOTLIST_TYPES> HOTLIST_TYPES
    {
        get
        {
            return this.GetTable<HOTLIST_TYPES>();
        }
    }

    public System.Data.Linq.Table<PLATES> PLATES
    {
        get
        {
            return this.GetTable<PLATES>();
        }
    }

    public System.Data.Linq.Table<ROLE_TYPES> ROLE_TYPES
    {
        get
        {
            return this.GetTable<ROLE_TYPES>();
        }
    }

    public System.Data.Linq.Table<STATE_CODES> STATE_CODES
    {
        get
        {
            return this.GetTable<STATE_CODES>();
        }
    }

    public System.Data.Linq.Table<USERS> USERS
    {
        get
        {
            return this.GetTable<USERS>();
        }
    }
}

[Table(Name = "dbo.ALERT_ACTION_TYPES")]
public partial class ALERT_ACTION_TYPES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _ALERT_ACTION_TYPE_ID;

    private string _ALERT_ACTION_TYPE;

    private string _ALERT_ACTION_DESC;

    private EntitySet<ALERTS> _ALERTS;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnALERT_ACTION_TYPE_IDChanging(int value);
    partial void OnALERT_ACTION_TYPE_IDChanged();
    partial void OnALERT_ACTION_TYPEChanging(string value);
    partial void OnALERT_ACTION_TYPEChanged();
    partial void OnALERT_ACTION_DESCChanging(string value);
    partial void OnALERT_ACTION_DESCChanged();
    #endregion

    public ALERT_ACTION_TYPES()
    {
        this._ALERTS = new EntitySet<ALERTS>(new Action<ALERTS>(this.attach_ALERTS), new Action<ALERTS>(this.detach_ALERTS));
        OnCreated();
    }

    [Column(Storage = "_ALERT_ACTION_TYPE_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int ALERT_ACTION_TYPE_ID
    {
        get
        {
            return this._ALERT_ACTION_TYPE_ID;
        }
        set
        {
            if ((this._ALERT_ACTION_TYPE_ID != value))
            {
                this.OnALERT_ACTION_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ALERT_ACTION_TYPE_ID = value;
                this.SendPropertyChanged("ALERT_ACTION_TYPE_ID");
                this.OnALERT_ACTION_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_ACTION_TYPE", DbType = "NVarChar(20)")]
    public string ALERT_ACTION_TYPE
    {
        get
        {
            return this._ALERT_ACTION_TYPE;
        }
        set
        {
            if ((this._ALERT_ACTION_TYPE != value))
            {
                this.OnALERT_ACTION_TYPEChanging(value);
                this.SendPropertyChanging();
                this._ALERT_ACTION_TYPE = value;
                this.SendPropertyChanged("ALERT_ACTION_TYPE");
                this.OnALERT_ACTION_TYPEChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_ACTION_DESC", DbType = "NVarChar(500)")]
    public string ALERT_ACTION_DESC
    {
        get
        {
            return this._ALERT_ACTION_DESC;
        }
        set
        {
            if ((this._ALERT_ACTION_DESC != value))
            {
                this.OnALERT_ACTION_DESCChanging(value);
                this.SendPropertyChanging();
                this._ALERT_ACTION_DESC = value;
                this.SendPropertyChanged("ALERT_ACTION_DESC");
                this.OnALERT_ACTION_DESCChanged();
            }
        }
    }

    [Association(Name = "FK_ALERTS_ALERT_ACTION_TYPES", Storage = "_ALERTS", OtherKey = "ALERT_ACTION_TYPE_ID", DeleteRule = "NO ACTION")]
    public EntitySet<ALERTS> ALERTS
    {
        get
        {
            return this._ALERTS;
        }
        set
        {
            this._ALERTS.Assign(value);
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    private void attach_ALERTS(ALERTS entity)
    {
        this.SendPropertyChanging();
        entity.ALERT_ACTION_TYPES = this;
    }

    private void detach_ALERTS(ALERTS entity)
    {
        this.SendPropertyChanging();
        entity.ALERT_ACTION_TYPES = null;
    }
}

[Table(Name = "dbo.ALERT_TYPES")]
public partial class ALERT_TYPES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _ALERT_TYPE_ID;

    private string _ALERT_TYPE;

    private string _ALERT_DESC;

    private EntitySet<ALERTS> _ALERTS;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnALERT_TYPE_IDChanging(int value);
    partial void OnALERT_TYPE_IDChanged();
    partial void OnALERT_TYPEChanging(string value);
    partial void OnALERT_TYPEChanged();
    partial void OnALERT_DESCChanging(string value);
    partial void OnALERT_DESCChanged();
    #endregion

    public ALERT_TYPES()
    {
        this._ALERTS = new EntitySet<ALERTS>(new Action<ALERTS>(this.attach_ALERTS), new Action<ALERTS>(this.detach_ALERTS));
        OnCreated();
    }

    [Column(Storage = "_ALERT_TYPE_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int ALERT_TYPE_ID
    {
        get
        {
            return this._ALERT_TYPE_ID;
        }
        set
        {
            if ((this._ALERT_TYPE_ID != value))
            {
                this.OnALERT_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ALERT_TYPE_ID = value;
                this.SendPropertyChanged("ALERT_TYPE_ID");
                this.OnALERT_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_TYPE", DbType = "NVarChar(50)")]
    public string ALERT_TYPE
    {
        get
        {
            return this._ALERT_TYPE;
        }
        set
        {
            if ((this._ALERT_TYPE != value))
            {
                this.OnALERT_TYPEChanging(value);
                this.SendPropertyChanging();
                this._ALERT_TYPE = value;
                this.SendPropertyChanged("ALERT_TYPE");
                this.OnALERT_TYPEChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_DESC", DbType = "NVarChar(50)")]
    public string ALERT_DESC
    {
        get
        {
            return this._ALERT_DESC;
        }
        set
        {
            if ((this._ALERT_DESC != value))
            {
                this.OnALERT_DESCChanging(value);
                this.SendPropertyChanging();
                this._ALERT_DESC = value;
                this.SendPropertyChanged("ALERT_DESC");
                this.OnALERT_DESCChanged();
            }
        }
    }

    [Association(Name = "FK_ALERTS_ALERT_TYPES", Storage = "_ALERTS", OtherKey = "ALERT_TYPE_ID", DeleteRule = "NO ACTION")]
    public EntitySet<ALERTS> ALERTS
    {
        get
        {
            return this._ALERTS;
        }
        set
        {
            this._ALERTS.Assign(value);
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    private void attach_ALERTS(ALERTS entity)
    {
        this.SendPropertyChanging();
        entity.ALERT_TYPES = this;
    }

    private void detach_ALERTS(ALERTS entity)
    {
        this.SendPropertyChanging();
        entity.ALERT_TYPES = null;
    }
}

[Table(Name = "dbo.ALERTS")]
public partial class ALERTS : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _ALERT_ID;

    private System.Nullable<int> _ALERT_TYPE_ID;

    private System.Nullable<int> _ALERT_ACTION_TYPE_ID;

    private string _PLATE;

    private string _MESSAGEKEY;

    private string _MESSAGEDATA;

    private string _RESPONSETYPE;

    private System.Nullable<int> _USER_ID;

    private string _COMMENTS;

    private string _DATETIME_ALERT;

    private EntityRef<ALERT_ACTION_TYPES> _ALERT_ACTION_TYPES;

    private EntityRef<ALERT_TYPES> _ALERT_TYPES;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnALERT_IDChanging(int value);
    partial void OnALERT_IDChanged();
    partial void OnALERT_TYPE_IDChanging(System.Nullable<int> value);
    partial void OnALERT_TYPE_IDChanged();
    partial void OnALERT_ACTION_TYPE_IDChanging(System.Nullable<int> value);
    partial void OnALERT_ACTION_TYPE_IDChanged();
    partial void OnPLATEChanging(string value);
    partial void OnPLATEChanged();
    partial void OnMESSAGEKEYChanging(string value);
    partial void OnMESSAGEKEYChanged();
    partial void OnMESSAGEDATAChanging(string value);
    partial void OnMESSAGEDATAChanged();
    partial void OnRESPONSETYPEChanging(string value);
    partial void OnRESPONSETYPEChanged();
    partial void OnUSER_IDChanging(System.Nullable<int> value);
    partial void OnUSER_IDChanged();
    partial void OnCOMMENTSChanging(string value);
    partial void OnCOMMENTSChanged();
    partial void OnDATETIME_ALERTChanging(string value);
    partial void OnDATETIME_ALERTChanged();
    #endregion

    public ALERTS()
    {
        this._ALERT_ACTION_TYPES = default(EntityRef<ALERT_ACTION_TYPES>);
        this._ALERT_TYPES = default(EntityRef<ALERT_TYPES>);
        OnCreated();
    }

    [Column(Storage = "_ALERT_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int ALERT_ID
    {
        get
        {
            return this._ALERT_ID;
        }
        set
        {
            if ((this._ALERT_ID != value))
            {
                this.OnALERT_IDChanging(value);
                this.SendPropertyChanging();
                this._ALERT_ID = value;
                this.SendPropertyChanged("ALERT_ID");
                this.OnALERT_IDChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_TYPE_ID", DbType = "Int")]
    public System.Nullable<int> ALERT_TYPE_ID
    {
        get
        {
            return this._ALERT_TYPE_ID;
        }
        set
        {
            if ((this._ALERT_TYPE_ID != value))
            {
                if (this._ALERT_TYPES.HasLoadedOrAssignedValue)
                {
                    throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                }
                this.OnALERT_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ALERT_TYPE_ID = value;
                this.SendPropertyChanged("ALERT_TYPE_ID");
                this.OnALERT_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_ALERT_ACTION_TYPE_ID", DbType = "Int")]
    public System.Nullable<int> ALERT_ACTION_TYPE_ID
    {
        get
        {
            return this._ALERT_ACTION_TYPE_ID;
        }
        set
        {
            if ((this._ALERT_ACTION_TYPE_ID != value))
            {
                if (this._ALERT_ACTION_TYPES.HasLoadedOrAssignedValue)
                {
                    throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                }
                this.OnALERT_ACTION_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ALERT_ACTION_TYPE_ID = value;
                this.SendPropertyChanged("ALERT_ACTION_TYPE_ID");
                this.OnALERT_ACTION_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_PLATE", DbType = "NVarChar(50)")]
    public string PLATE
    {
        get
        {
            return this._PLATE;
        }
        set
        {
            if ((this._PLATE != value))
            {
                this.OnPLATEChanging(value);
                this.SendPropertyChanging();
                this._PLATE = value;
                this.SendPropertyChanged("PLATE");
                this.OnPLATEChanged();
            }
        }
    }

    [Column(Storage = "_MESSAGEKEY", DbType = "NVarChar(50)")]
    public string MESSAGEKEY
    {
        get
        {
            return this._MESSAGEKEY;
        }
        set
        {
            if ((this._MESSAGEKEY != value))
            {
                this.OnMESSAGEKEYChanging(value);
                this.SendPropertyChanging();
                this._MESSAGEKEY = value;
                this.SendPropertyChanged("MESSAGEKEY");
                this.OnMESSAGEKEYChanged();
            }
        }
    }

    [Column(Storage = "_MESSAGEDATA", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
    public string MESSAGEDATA
    {
        get
        {
            return this._MESSAGEDATA;
        }
        set
        {
            if ((this._MESSAGEDATA != value))
            {
                this.OnMESSAGEDATAChanging(value);
                this.SendPropertyChanging();
                this._MESSAGEDATA = value;
                this.SendPropertyChanged("MESSAGEDATA");
                this.OnMESSAGEDATAChanged();
            }
        }
    }

    [Column(Storage = "_RESPONSETYPE", DbType = "NVarChar(20)")]
    public string RESPONSETYPE
    {
        get
        {
            return this._RESPONSETYPE;
        }
        set
        {
            if ((this._RESPONSETYPE != value))
            {
                this.OnRESPONSETYPEChanging(value);
                this.SendPropertyChanging();
                this._RESPONSETYPE = value;
                this.SendPropertyChanged("RESPONSETYPE");
                this.OnRESPONSETYPEChanged();
            }
        }
    }

    [Column(Storage = "_USER_ID", DbType = "Int")]
    public System.Nullable<int> USER_ID
    {
        get
        {
            return this._USER_ID;
        }
        set
        {
            if ((this._USER_ID != value))
            {
                this.OnUSER_IDChanging(value);
                this.SendPropertyChanging();
                this._USER_ID = value;
                this.SendPropertyChanged("USER_ID");
                this.OnUSER_IDChanged();
            }
        }
    }

    [Column(Storage = "_COMMENTS", DbType = "NVarChar(500)")]
    public string COMMENTS
    {
        get
        {
            return this._COMMENTS;
        }
        set
        {
            if ((this._COMMENTS != value))
            {
                this.OnCOMMENTSChanging(value);
                this.SendPropertyChanging();
                this._COMMENTS = value;
                this.SendPropertyChanged("COMMENTS");
                this.OnCOMMENTSChanged();
            }
        }
    }

    [Column(Storage = "_DATETIME_ALERT", DbType = "NVarChar(50)")]
    public string DATETIME_ALERT
    {
        get
        {
            return this._DATETIME_ALERT;
        }
        set
        {
            if ((this._DATETIME_ALERT != value))
            {
                this.OnDATETIME_ALERTChanging(value);
                this.SendPropertyChanging();
                this._DATETIME_ALERT = value;
                this.SendPropertyChanged("DATETIME_ALERT");
                this.OnDATETIME_ALERTChanged();
            }
        }
    }

    [Association(Name = "FK_ALERTS_ALERT_ACTION_TYPES", Storage = "_ALERT_ACTION_TYPES", ThisKey = "ALERT_ACTION_TYPE_ID", IsForeignKey = true)]
    public ALERT_ACTION_TYPES ALERT_ACTION_TYPES
    {
        get
        {
            return this._ALERT_ACTION_TYPES.Entity;
        }
        set
        {
            ALERT_ACTION_TYPES previousValue = this._ALERT_ACTION_TYPES.Entity;
            if (((previousValue != value)
                        || (this._ALERT_ACTION_TYPES.HasLoadedOrAssignedValue == false)))
            {
                this.SendPropertyChanging();
                if ((previousValue != null))
                {
                    this._ALERT_ACTION_TYPES.Entity = null;
                    previousValue.ALERTS.Remove(this);
                }
                this._ALERT_ACTION_TYPES.Entity = value;
                if ((value != null))
                {
                    value.ALERTS.Add(this);
                    this._ALERT_ACTION_TYPE_ID = value.ALERT_ACTION_TYPE_ID;
                }
                else
                {
                    this._ALERT_ACTION_TYPE_ID = default(Nullable<int>);
                }
                this.SendPropertyChanged("ALERT_ACTION_TYPES");
            }
        }
    }

    [Association(Name = "FK_ALERTS_ALERT_TYPES", Storage = "_ALERT_TYPES", ThisKey = "ALERT_TYPE_ID", IsForeignKey = true)]
    public ALERT_TYPES ALERT_TYPES
    {
        get
        {
            return this._ALERT_TYPES.Entity;
        }
        set
        {
            ALERT_TYPES previousValue = this._ALERT_TYPES.Entity;
            if (((previousValue != value)
                        || (this._ALERT_TYPES.HasLoadedOrAssignedValue == false)))
            {
                this.SendPropertyChanging();
                if ((previousValue != null))
                {
                    this._ALERT_TYPES.Entity = null;
                    previousValue.ALERTS.Remove(this);
                }
                this._ALERT_TYPES.Entity = value;
                if ((value != null))
                {
                    value.ALERTS.Add(this);
                    this._ALERT_TYPE_ID = value.ALERT_TYPE_ID;
                }
                else
                {
                    this._ALERT_TYPE_ID = default(Nullable<int>);
                }
                this.SendPropertyChanged("ALERT_TYPES");
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

[Table(Name = "dbo.HOTLIST")]
public partial class HOTLIST : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _HOTLIST_ID;

    private string _PLATE;

    private System.Nullable<int> _STATE_ID;

    private System.Nullable<int> _HOTLIST_TYPE_ID;

    private string _NOTES;

    private EntityRef<HOTLIST_TYPES> _HOTLIST_TYPES;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHOTLIST_IDChanging(int value);
    partial void OnHOTLIST_IDChanged();
    partial void OnPLATEChanging(string value);
    partial void OnPLATEChanged();
    partial void OnSTATE_IDChanging(System.Nullable<int> value);
    partial void OnSTATE_IDChanged();
    partial void OnHOTLIST_TYPE_IDChanging(System.Nullable<int> value);
    partial void OnHOTLIST_TYPE_IDChanged();
    partial void OnNOTESChanging(string value);
    partial void OnNOTESChanged();
    #endregion

    public HOTLIST()
    {
        this._HOTLIST_TYPES = default(EntityRef<HOTLIST_TYPES>);
        OnCreated();
    }

    [Column(Storage = "_HOTLIST_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int HOTLIST_ID
    {
        get
        {
            return this._HOTLIST_ID;
        }
        set
        {
            if ((this._HOTLIST_ID != value))
            {
                this.OnHOTLIST_IDChanging(value);
                this.SendPropertyChanging();
                this._HOTLIST_ID = value;
                this.SendPropertyChanged("HOTLIST_ID");
                this.OnHOTLIST_IDChanged();
            }
        }
    }

    [Column(Storage = "_PLATE", DbType = "NVarChar(20)")]
    public string PLATE
    {
        get
        {
            return this._PLATE;
        }
        set
        {
            if ((this._PLATE != value))
            {
                this.OnPLATEChanging(value);
                this.SendPropertyChanging();
                this._PLATE = value;
                this.SendPropertyChanged("PLATE");
                this.OnPLATEChanged();
            }
        }
    }

    [Column(Storage = "_STATE_ID", DbType = "Int")]
    public System.Nullable<int> STATE_ID
    {
        get
        {
            return this._STATE_ID;
        }
        set
        {
            if ((this._STATE_ID != value))
            {
                this.OnSTATE_IDChanging(value);
                this.SendPropertyChanging();
                this._STATE_ID = value;
                this.SendPropertyChanged("STATE_ID");
                this.OnSTATE_IDChanged();
            }
        }
    }

    [Column(Storage = "_HOTLIST_TYPE_ID", DbType = "Int")]
    public System.Nullable<int> HOTLIST_TYPE_ID
    {
        get
        {
            return this._HOTLIST_TYPE_ID;
        }
        set
        {
            if ((this._HOTLIST_TYPE_ID != value))
            {
                if (this._HOTLIST_TYPES.HasLoadedOrAssignedValue)
                {
                    throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                }
                this.OnHOTLIST_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._HOTLIST_TYPE_ID = value;
                this.SendPropertyChanged("HOTLIST_TYPE_ID");
                this.OnHOTLIST_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_NOTES", DbType = "NVarChar(500)")]
    public string NOTES
    {
        get
        {
            return this._NOTES;
        }
        set
        {
            if ((this._NOTES != value))
            {
                this.OnNOTESChanging(value);
                this.SendPropertyChanging();
                this._NOTES = value;
                this.SendPropertyChanged("NOTES");
                this.OnNOTESChanged();
            }
        }
    }

    [Association(Name = "FK_HOTLIST_HOTLIST_TYPES", Storage = "_HOTLIST_TYPES", ThisKey = "HOTLIST_TYPE_ID", IsForeignKey = true)]
    public HOTLIST_TYPES HOTLIST_TYPES
    {
        get
        {
            return this._HOTLIST_TYPES.Entity;
        }
        set
        {
            HOTLIST_TYPES previousValue = this._HOTLIST_TYPES.Entity;
            if (((previousValue != value)
                        || (this._HOTLIST_TYPES.HasLoadedOrAssignedValue == false)))
            {
                this.SendPropertyChanging();
                if ((previousValue != null))
                {
                    this._HOTLIST_TYPES.Entity = null;
                    previousValue.HOTLIST.Remove(this);
                }
                this._HOTLIST_TYPES.Entity = value;
                if ((value != null))
                {
                    value.HOTLIST.Add(this);
                    this._HOTLIST_TYPE_ID = value.HOTLIST_TYPE_ID;
                }
                else
                {
                    this._HOTLIST_TYPE_ID = default(Nullable<int>);
                }
                this.SendPropertyChanged("HOTLIST_TYPES");
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

[Table(Name = "dbo.HOTLIST_TYPES")]
public partial class HOTLIST_TYPES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _HOTLIST_TYPE_ID;

    private string _HOTLIST_TYPE;

    private string _HOTLIST_DESC;

    private EntitySet<HOTLIST> _HOTLIST;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHOTLIST_TYPE_IDChanging(int value);
    partial void OnHOTLIST_TYPE_IDChanged();
    partial void OnHOTLIST_TYPEChanging(string value);
    partial void OnHOTLIST_TYPEChanged();
    partial void OnHOTLIST_DESCChanging(string value);
    partial void OnHOTLIST_DESCChanged();
    #endregion

    public HOTLIST_TYPES()
    {
        this._HOTLIST = new EntitySet<HOTLIST>(new Action<HOTLIST>(this.attach_HOTLIST), new Action<HOTLIST>(this.detach_HOTLIST));
        OnCreated();
    }

    [Column(Storage = "_HOTLIST_TYPE_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int HOTLIST_TYPE_ID
    {
        get
        {
            return this._HOTLIST_TYPE_ID;
        }
        set
        {
            if ((this._HOTLIST_TYPE_ID != value))
            {
                this.OnHOTLIST_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._HOTLIST_TYPE_ID = value;
                this.SendPropertyChanged("HOTLIST_TYPE_ID");
                this.OnHOTLIST_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_HOTLIST_TYPE", DbType = "NVarChar(20)")]
    public string HOTLIST_TYPE
    {
        get
        {
            return this._HOTLIST_TYPE;
        }
        set
        {
            if ((this._HOTLIST_TYPE != value))
            {
                this.OnHOTLIST_TYPEChanging(value);
                this.SendPropertyChanging();
                this._HOTLIST_TYPE = value;
                this.SendPropertyChanged("HOTLIST_TYPE");
                this.OnHOTLIST_TYPEChanged();
            }
        }
    }

    [Column(Storage = "_HOTLIST_DESC", DbType = "NVarChar(500)")]
    public string HOTLIST_DESC
    {
        get
        {
            return this._HOTLIST_DESC;
        }
        set
        {
            if ((this._HOTLIST_DESC != value))
            {
                this.OnHOTLIST_DESCChanging(value);
                this.SendPropertyChanging();
                this._HOTLIST_DESC = value;
                this.SendPropertyChanged("HOTLIST_DESC");
                this.OnHOTLIST_DESCChanged();
            }
        }
    }

    [Association(Name = "FK_HOTLIST_HOTLIST_TYPES", Storage = "_HOTLIST", OtherKey = "HOTLIST_TYPE_ID", DeleteRule = "NO ACTION")]
    public EntitySet<HOTLIST> HOTLIST
    {
        get
        {
            return this._HOTLIST;
        }
        set
        {
            this._HOTLIST.Assign(value);
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    private void attach_HOTLIST(HOTLIST entity)
    {
        this.SendPropertyChanging();
        entity.HOTLIST_TYPES = this;
    }

    private void detach_HOTLIST(HOTLIST entity)
    {
        this.SendPropertyChanging();
        entity.HOTLIST_TYPES = null;
    }
}

[Table(Name = "dbo.PLATES")]
public partial class PLATES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private decimal _PLATE_ID;

    private string _PLATE;

    private System.Nullable<int> _STATE_ID;

    private string _PLATE_IMAGE;

    private string _SOURCE_IMAGE;

    private string _LONGITUDE;

    private string _LATITUDE;

    private string _CONFIDENCE_LEVEL;

    private System.Nullable<System.DateTime> _DATETIME_CAPTURED;

    private System.Nullable<int> _USER_ID;

    private string _FROM_SYTEM;

    private string _DIRECTION;

    private EntityRef<USERS> _USERS;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPLATE_IDChanging(decimal value);
    partial void OnPLATE_IDChanged();
    partial void OnPLATEChanging(string value);
    partial void OnPLATEChanged();
    partial void OnSTATE_IDChanging(System.Nullable<int> value);
    partial void OnSTATE_IDChanged();
    partial void OnPLATE_IMAGEChanging(string value);
    partial void OnPLATE_IMAGEChanged();
    partial void OnSOURCE_IMAGEChanging(string value);
    partial void OnSOURCE_IMAGEChanged();
    partial void OnLONGITUDEChanging(string value);
    partial void OnLONGITUDEChanged();
    partial void OnLATITUDEChanging(string value);
    partial void OnLATITUDEChanged();
    partial void OnCONFIDENCE_LEVELChanging(string value);
    partial void OnCONFIDENCE_LEVELChanged();
    partial void OnDATETIME_CAPTUREDChanging(System.Nullable<System.DateTime> value);
    partial void OnDATETIME_CAPTUREDChanged();
    partial void OnUSER_IDChanging(System.Nullable<int> value);
    partial void OnUSER_IDChanged();
    partial void OnFROM_SYTEMChanging(string value);
    partial void OnFROM_SYTEMChanged();
    partial void OnDIRECTIONChanging(string value);
    partial void OnDIRECTIONChanged();
    #endregion

    public PLATES()
    {
        this._USERS = default(EntityRef<USERS>);
        OnCreated();
    }

    [Column(Storage = "_PLATE_ID", AutoSync = AutoSync.OnInsert, DbType = "Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public decimal PLATE_ID
    {
        get
        {
            return this._PLATE_ID;
        }
        set
        {
            if ((this._PLATE_ID != value))
            {
                this.OnPLATE_IDChanging(value);
                this.SendPropertyChanging();
                this._PLATE_ID = value;
                this.SendPropertyChanged("PLATE_ID");
                this.OnPLATE_IDChanged();
            }
        }
    }

    [Column(Storage = "_PLATE", DbType = "NVarChar(50)")]
    public string PLATE
    {
        get
        {
            return this._PLATE;
        }
        set
        {
            if ((this._PLATE != value))
            {
                this.OnPLATEChanging(value);
                this.SendPropertyChanging();
                this._PLATE = value;
                this.SendPropertyChanged("PLATE");
                this.OnPLATEChanged();
            }
        }
    }

    [Column(Storage = "_STATE_ID", DbType = "Int")]
    public System.Nullable<int> STATE_ID
    {
        get
        {
            return this._STATE_ID;
        }
        set
        {
            if ((this._STATE_ID != value))
            {
                this.OnSTATE_IDChanging(value);
                this.SendPropertyChanging();
                this._STATE_ID = value;
                this.SendPropertyChanged("STATE_ID");
                this.OnSTATE_IDChanged();
            }
        }
    }

    [Column(Storage = "_PLATE_IMAGE", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
    public string PLATE_IMAGE
    {
        get
        {
            return this._PLATE_IMAGE;
        }
        set
        {
            if ((this._PLATE_IMAGE != value))
            {
                this.OnPLATE_IMAGEChanging(value);
                this.SendPropertyChanging();
                this._PLATE_IMAGE = value;
                this.SendPropertyChanged("PLATE_IMAGE");
                this.OnPLATE_IMAGEChanged();
            }
        }
    }

    [Column(Storage = "_SOURCE_IMAGE", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
    public string SOURCE_IMAGE
    {
        get
        {
            return this._SOURCE_IMAGE;
        }
        set
        {
            if ((this._SOURCE_IMAGE != value))
            {
                this.OnSOURCE_IMAGEChanging(value);
                this.SendPropertyChanging();
                this._SOURCE_IMAGE = value;
                this.SendPropertyChanged("SOURCE_IMAGE");
                this.OnSOURCE_IMAGEChanged();
            }
        }
    }

    [Column(Storage = "_LONGITUDE", DbType = "VarChar(50)")]
    public string LONGITUDE
    {
        get
        {
            return this._LONGITUDE;
        }
        set
        {
            if ((this._LONGITUDE != value))
            {
                this.OnLONGITUDEChanging(value);
                this.SendPropertyChanging();
                this._LONGITUDE = value;
                this.SendPropertyChanged("LONGITUDE");
                this.OnLONGITUDEChanged();
            }
        }
    }

    [Column(Storage = "_LATITUDE", DbType = "VarChar(50)")]
    public string LATITUDE
    {
        get
        {
            return this._LATITUDE;
        }
        set
        {
            if ((this._LATITUDE != value))
            {
                this.OnLATITUDEChanging(value);
                this.SendPropertyChanging();
                this._LATITUDE = value;
                this.SendPropertyChanged("LATITUDE");
                this.OnLATITUDEChanged();
            }
        }
    }

    [Column(Storage = "_CONFIDENCE_LEVEL", DbType = "VarChar(50)")]
    public string CONFIDENCE_LEVEL
    {
        get
        {
            return this._CONFIDENCE_LEVEL;
        }
        set
        {
            if ((this._CONFIDENCE_LEVEL != value))
            {
                this.OnCONFIDENCE_LEVELChanging(value);
                this.SendPropertyChanging();
                this._CONFIDENCE_LEVEL = value;
                this.SendPropertyChanged("CONFIDENCE_LEVEL");
                this.OnCONFIDENCE_LEVELChanged();
            }
        }
    }

    [Column(Storage = "_DATETIME_CAPTURED", DbType = "DateTime")]
    public System.Nullable<System.DateTime> DATETIME_CAPTURED
    {
        get
        {
            return this._DATETIME_CAPTURED;
        }
        set
        {
            if ((this._DATETIME_CAPTURED != value))
            {
                this.OnDATETIME_CAPTUREDChanging(value);
                this.SendPropertyChanging();
                this._DATETIME_CAPTURED = value;
                this.SendPropertyChanged("DATETIME_CAPTURED");
                this.OnDATETIME_CAPTUREDChanged();
            }
        }
    }

    [Column(Storage = "_USER_ID", DbType = "Int")]
    public System.Nullable<int> USER_ID
    {
        get
        {
            return this._USER_ID;
        }
        set
        {
            if ((this._USER_ID != value))
            {
                if (this._USERS.HasLoadedOrAssignedValue)
                {
                    throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                }
                this.OnUSER_IDChanging(value);
                this.SendPropertyChanging();
                this._USER_ID = value;
                this.SendPropertyChanged("USER_ID");
                this.OnUSER_IDChanged();
            }
        }
    }

    [Column(Storage = "_FROM_SYTEM", DbType = "NVarChar(50)")]
    public string FROM_SYTEM
    {
        get
        {
            return this._FROM_SYTEM;
        }
        set
        {
            if ((this._FROM_SYTEM != value))
            {
                this.OnFROM_SYTEMChanging(value);
                this.SendPropertyChanging();
                this._FROM_SYTEM = value;
                this.SendPropertyChanged("FROM_SYTEM");
                this.OnFROM_SYTEMChanged();
            }
        }
    }

    [Column(Storage = "_DIRECTION", DbType = "NVarChar(50)")]
    public string DIRECTION
    {
        get
        {
            return this._DIRECTION;
        }
        set
        {
            if ((this._DIRECTION != value))
            {
                this.OnDIRECTIONChanging(value);
                this.SendPropertyChanging();
                this._DIRECTION = value;
                this.SendPropertyChanged("DIRECTION");
                this.OnDIRECTIONChanged();
            }
        }
    }

    [Association(Name = "FK_PLATES_USERS", Storage = "_USERS", ThisKey = "USER_ID", IsForeignKey = true)]
    public USERS USERS
    {
        get
        {
            return this._USERS.Entity;
        }
        set
        {
            USERS previousValue = this._USERS.Entity;
            if (((previousValue != value)
                        || (this._USERS.HasLoadedOrAssignedValue == false)))
            {
                this.SendPropertyChanging();
                if ((previousValue != null))
                {
                    this._USERS.Entity = null;
                    previousValue.PLATES.Remove(this);
                }
                this._USERS.Entity = value;
                if ((value != null))
                {
                    value.PLATES.Add(this);
                    this._USER_ID = value.USER_ID;
                }
                else
                {
                    this._USER_ID = default(Nullable<int>);
                }
                this.SendPropertyChanged("USERS");
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

[Table(Name = "dbo.ROLE_TYPES")]
public partial class ROLE_TYPES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _ROLE_TYPE_ID;

    private string _ROLE_TYPE;

    private string _ROLE_DESC;

    private EntitySet<USERS> _USERS;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnROLE_TYPE_IDChanging(int value);
    partial void OnROLE_TYPE_IDChanged();
    partial void OnROLE_TYPEChanging(string value);
    partial void OnROLE_TYPEChanged();
    partial void OnROLE_DESCChanging(string value);
    partial void OnROLE_DESCChanged();
    #endregion

    public ROLE_TYPES()
    {
        this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
        OnCreated();
    }

    [Column(Storage = "_ROLE_TYPE_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int ROLE_TYPE_ID
    {
        get
        {
            return this._ROLE_TYPE_ID;
        }
        set
        {
            if ((this._ROLE_TYPE_ID != value))
            {
                this.OnROLE_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ROLE_TYPE_ID = value;
                this.SendPropertyChanged("ROLE_TYPE_ID");
                this.OnROLE_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_ROLE_TYPE", DbType = "NVarChar(20)")]
    public string ROLE_TYPE
    {
        get
        {
            return this._ROLE_TYPE;
        }
        set
        {
            if ((this._ROLE_TYPE != value))
            {
                this.OnROLE_TYPEChanging(value);
                this.SendPropertyChanging();
                this._ROLE_TYPE = value;
                this.SendPropertyChanged("ROLE_TYPE");
                this.OnROLE_TYPEChanged();
            }
        }
    }

    [Column(Storage = "_ROLE_DESC", DbType = "NVarChar(500)")]
    public string ROLE_DESC
    {
        get
        {
            return this._ROLE_DESC;
        }
        set
        {
            if ((this._ROLE_DESC != value))
            {
                this.OnROLE_DESCChanging(value);
                this.SendPropertyChanging();
                this._ROLE_DESC = value;
                this.SendPropertyChanged("ROLE_DESC");
                this.OnROLE_DESCChanged();
            }
        }
    }

    [Association(Name = "FK_USERS_ROLE_TYPES", Storage = "_USERS", OtherKey = "ROLE_TYPE_ID", DeleteRule = "NO ACTION")]
    public EntitySet<USERS> USERS
    {
        get
        {
            return this._USERS;
        }
        set
        {
            this._USERS.Assign(value);
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    private void attach_USERS(USERS entity)
    {
        this.SendPropertyChanging();
        entity.ROLE_TYPES = this;
    }

    private void detach_USERS(USERS entity)
    {
        this.SendPropertyChanging();
        entity.ROLE_TYPES = null;
    }
}

[Table(Name = "dbo.STATE_CODES")]
public partial class STATE_CODES : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _STATE_ID;

    private string _STATE;

    private System.Nullable<int> _COUNTRY_ID;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTATE_IDChanging(int value);
    partial void OnSTATE_IDChanged();
    partial void OnSTATEChanging(string value);
    partial void OnSTATEChanged();
    partial void OnCOUNTRY_IDChanging(System.Nullable<int> value);
    partial void OnCOUNTRY_IDChanged();
    #endregion

    public STATE_CODES()
    {
        OnCreated();
    }

    [Column(Storage = "_STATE_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int STATE_ID
    {
        get
        {
            return this._STATE_ID;
        }
        set
        {
            if ((this._STATE_ID != value))
            {
                this.OnSTATE_IDChanging(value);
                this.SendPropertyChanging();
                this._STATE_ID = value;
                this.SendPropertyChanged("STATE_ID");
                this.OnSTATE_IDChanged();
            }
        }
    }

    [Column(Storage = "_STATE", DbType = "NVarChar(20)")]
    public string STATE
    {
        get
        {
            return this._STATE;
        }
        set
        {
            if ((this._STATE != value))
            {
                this.OnSTATEChanging(value);
                this.SendPropertyChanging();
                this._STATE = value;
                this.SendPropertyChanged("STATE");
                this.OnSTATEChanged();
            }
        }
    }

    [Column(Storage = "_COUNTRY_ID", DbType = "Int")]
    public System.Nullable<int> COUNTRY_ID
    {
        get
        {
            return this._COUNTRY_ID;
        }
        set
        {
            if ((this._COUNTRY_ID != value))
            {
                this.OnCOUNTRY_IDChanging(value);
                this.SendPropertyChanging();
                this._COUNTRY_ID = value;
                this.SendPropertyChanged("COUNTRY_ID");
                this.OnCOUNTRY_IDChanged();
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

[Table(Name = "dbo.USERS")]
public partial class USERS : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _USER_ID;

    private string _USER_NAME;

    private string _PASSWORD;

    private string _PASSWORD_CHNGE;

    private string _PASSWORD_CONFIRM;

    private string _FIRST_NAME;

    private string _LAST_NAME;

    private string _TITLE;

    private string _DATETIME_ADDED;

    private string _DATETIME_MODIFIED;

    private string _WORK_PHONE;

    private string _CELL_PHONE;

    private string _FAX;

    private string _LAST_LOGIN;

    private string _LAST_LOGOUT;

    private string _EMAIL;

    private string _CITY;

    private string _ZIP;

    private string _STATE;

    private string _STREE_ADDR;

    private System.Nullable<int> _ROLE_TYPE_ID;

    private string _SSN;

    private string _ORI;

    private string _MNEMONIC;

    private string _DEVICEID;

    private string _AGENCY;

    private string _STATUS;

    private string _ACCOUNT_LOCKED;

    private EntitySet<PLATES> _PLATES;

    private EntityRef<ROLE_TYPES> _ROLE_TYPES;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_IDChanging(int value);
    partial void OnUSER_IDChanged();
    partial void OnUSER_NAMEChanging(string value);
    partial void OnUSER_NAMEChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnPASSWORD_CHNGEChanging(string value);
    partial void OnPASSWORD_CHNGEChanged();
    partial void OnPASSWORD_CONFIRMChanging(string value);
    partial void OnPASSWORD_CONFIRMChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnTITLEChanging(string value);
    partial void OnTITLEChanged();
    partial void OnDATETIME_ADDEDChanging(string value);
    partial void OnDATETIME_ADDEDChanged();
    partial void OnDATETIME_MODIFIEDChanging(string value);
    partial void OnDATETIME_MODIFIEDChanged();
    partial void OnWORK_PHONEChanging(string value);
    partial void OnWORK_PHONEChanged();
    partial void OnCELL_PHONEChanging(string value);
    partial void OnCELL_PHONEChanged();
    partial void OnFAXChanging(string value);
    partial void OnFAXChanged();
    partial void OnLAST_LOGINChanging(string value);
    partial void OnLAST_LOGINChanged();
    partial void OnLAST_LOGOUTChanging(string value);
    partial void OnLAST_LOGOUTChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnZIPChanging(string value);
    partial void OnZIPChanged();
    partial void OnSTATEChanging(string value);
    partial void OnSTATEChanged();
    partial void OnSTREE_ADDRChanging(string value);
    partial void OnSTREE_ADDRChanged();
    partial void OnROLE_TYPE_IDChanging(System.Nullable<int> value);
    partial void OnROLE_TYPE_IDChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnORIChanging(string value);
    partial void OnORIChanged();
    partial void OnMNEMONICChanging(string value);
    partial void OnMNEMONICChanged();
    partial void OnDEVICEIDChanging(string value);
    partial void OnDEVICEIDChanged();
    partial void OnAGENCYChanging(string value);
    partial void OnAGENCYChanged();
    partial void OnSTATUSChanging(string value);
    partial void OnSTATUSChanged();
    partial void OnACCOUNT_LOCKEDChanging(string value);
    partial void OnACCOUNT_LOCKEDChanged();
    #endregion

    public USERS()
    {
        this._PLATES = new EntitySet<PLATES>(new Action<PLATES>(this.attach_PLATES), new Action<PLATES>(this.detach_PLATES));
        this._ROLE_TYPES = default(EntityRef<ROLE_TYPES>);
        OnCreated();
    }

    [Column(Storage = "_USER_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int USER_ID
    {
        get
        {
            return this._USER_ID;
        }
        set
        {
            if ((this._USER_ID != value))
            {
                this.OnUSER_IDChanging(value);
                this.SendPropertyChanging();
                this._USER_ID = value;
                this.SendPropertyChanged("USER_ID");
                this.OnUSER_IDChanged();
            }
        }
    }

    [Column(Storage = "_USER_NAME", DbType = "NVarChar(50)")]
    public string USER_NAME
    {
        get
        {
            return this._USER_NAME;
        }
        set
        {
            if ((this._USER_NAME != value))
            {
                this.OnUSER_NAMEChanging(value);
                this.SendPropertyChanging();
                this._USER_NAME = value;
                this.SendPropertyChanged("USER_NAME");
                this.OnUSER_NAMEChanged();
            }
        }
    }

    [Column(Storage = "_PASSWORD", DbType = "NVarChar(50)")]
    public string PASSWORD
    {
        get
        {
            return this._PASSWORD;
        }
        set
        {
            if ((this._PASSWORD != value))
            {
                this.OnPASSWORDChanging(value);
                this.SendPropertyChanging();
                this._PASSWORD = value;
                this.SendPropertyChanged("PASSWORD");
                this.OnPASSWORDChanged();
            }
        }
    }

    [Column(Storage = "_PASSWORD_CHNGE", DbType = "NVarChar(50)")]
    public string PASSWORD_CHNGE
    {
        get
        {
            return this._PASSWORD_CHNGE;
        }
        set
        {
            if ((this._PASSWORD_CHNGE != value))
            {
                this.OnPASSWORD_CHNGEChanging(value);
                this.SendPropertyChanging();
                this._PASSWORD_CHNGE = value;
                this.SendPropertyChanged("PASSWORD_CHNGE");
                this.OnPASSWORD_CHNGEChanged();
            }
        }
    }

    [Column(Storage = "_PASSWORD_CONFIRM", DbType = "NChar(10)")]
    public string PASSWORD_CONFIRM
    {
        get
        {
            return this._PASSWORD_CONFIRM;
        }
        set
        {
            if ((this._PASSWORD_CONFIRM != value))
            {
                this.OnPASSWORD_CONFIRMChanging(value);
                this.SendPropertyChanging();
                this._PASSWORD_CONFIRM = value;
                this.SendPropertyChanged("PASSWORD_CONFIRM");
                this.OnPASSWORD_CONFIRMChanged();
            }
        }
    }

    [Column(Storage = "_FIRST_NAME", DbType = "NVarChar(50)")]
    public string FIRST_NAME
    {
        get
        {
            return this._FIRST_NAME;
        }
        set
        {
            if ((this._FIRST_NAME != value))
            {
                this.OnFIRST_NAMEChanging(value);
                this.SendPropertyChanging();
                this._FIRST_NAME = value;
                this.SendPropertyChanged("FIRST_NAME");
                this.OnFIRST_NAMEChanged();
            }
        }
    }

    [Column(Storage = "_LAST_NAME", DbType = "NVarChar(50)")]
    public string LAST_NAME
    {
        get
        {
            return this._LAST_NAME;
        }
        set
        {
            if ((this._LAST_NAME != value))
            {
                this.OnLAST_NAMEChanging(value);
                this.SendPropertyChanging();
                this._LAST_NAME = value;
                this.SendPropertyChanged("LAST_NAME");
                this.OnLAST_NAMEChanged();
            }
        }
    }

    [Column(Storage = "_TITLE", DbType = "NChar(10)")]
    public string TITLE
    {
        get
        {
            return this._TITLE;
        }
        set
        {
            if ((this._TITLE != value))
            {
                this.OnTITLEChanging(value);
                this.SendPropertyChanging();
                this._TITLE = value;
                this.SendPropertyChanged("TITLE");
                this.OnTITLEChanged();
            }
        }
    }

    [Column(Storage = "_DATETIME_ADDED", DbType = "NVarChar(50)")]
    public string DATETIME_ADDED
    {
        get
        {
            return this._DATETIME_ADDED;
        }
        set
        {
            if ((this._DATETIME_ADDED != value))
            {
                this.OnDATETIME_ADDEDChanging(value);
                this.SendPropertyChanging();
                this._DATETIME_ADDED = value;
                this.SendPropertyChanged("DATETIME_ADDED");
                this.OnDATETIME_ADDEDChanged();
            }
        }
    }

    [Column(Storage = "_DATETIME_MODIFIED", DbType = "NVarChar(50)")]
    public string DATETIME_MODIFIED
    {
        get
        {
            return this._DATETIME_MODIFIED;
        }
        set
        {
            if ((this._DATETIME_MODIFIED != value))
            {
                this.OnDATETIME_MODIFIEDChanging(value);
                this.SendPropertyChanging();
                this._DATETIME_MODIFIED = value;
                this.SendPropertyChanged("DATETIME_MODIFIED");
                this.OnDATETIME_MODIFIEDChanged();
            }
        }
    }

    [Column(Storage = "_WORK_PHONE", DbType = "NVarChar(50)")]
    public string WORK_PHONE
    {
        get
        {
            return this._WORK_PHONE;
        }
        set
        {
            if ((this._WORK_PHONE != value))
            {
                this.OnWORK_PHONEChanging(value);
                this.SendPropertyChanging();
                this._WORK_PHONE = value;
                this.SendPropertyChanged("WORK_PHONE");
                this.OnWORK_PHONEChanged();
            }
        }
    }

    [Column(Storage = "_CELL_PHONE", DbType = "NVarChar(50)")]
    public string CELL_PHONE
    {
        get
        {
            return this._CELL_PHONE;
        }
        set
        {
            if ((this._CELL_PHONE != value))
            {
                this.OnCELL_PHONEChanging(value);
                this.SendPropertyChanging();
                this._CELL_PHONE = value;
                this.SendPropertyChanged("CELL_PHONE");
                this.OnCELL_PHONEChanged();
            }
        }
    }

    [Column(Storage = "_FAX", DbType = "NVarChar(50)")]
    public string FAX
    {
        get
        {
            return this._FAX;
        }
        set
        {
            if ((this._FAX != value))
            {
                this.OnFAXChanging(value);
                this.SendPropertyChanging();
                this._FAX = value;
                this.SendPropertyChanged("FAX");
                this.OnFAXChanged();
            }
        }
    }

    [Column(Storage = "_LAST_LOGIN", DbType = "NVarChar(50)")]
    public string LAST_LOGIN
    {
        get
        {
            return this._LAST_LOGIN;
        }
        set
        {
            if ((this._LAST_LOGIN != value))
            {
                this.OnLAST_LOGINChanging(value);
                this.SendPropertyChanging();
                this._LAST_LOGIN = value;
                this.SendPropertyChanged("LAST_LOGIN");
                this.OnLAST_LOGINChanged();
            }
        }
    }

    [Column(Storage = "_LAST_LOGOUT", DbType = "NVarChar(50)")]
    public string LAST_LOGOUT
    {
        get
        {
            return this._LAST_LOGOUT;
        }
        set
        {
            if ((this._LAST_LOGOUT != value))
            {
                this.OnLAST_LOGOUTChanging(value);
                this.SendPropertyChanging();
                this._LAST_LOGOUT = value;
                this.SendPropertyChanged("LAST_LOGOUT");
                this.OnLAST_LOGOUTChanged();
            }
        }
    }

    [Column(Storage = "_EMAIL", DbType = "NVarChar(50)")]
    public string EMAIL
    {
        get
        {
            return this._EMAIL;
        }
        set
        {
            if ((this._EMAIL != value))
            {
                this.OnEMAILChanging(value);
                this.SendPropertyChanging();
                this._EMAIL = value;
                this.SendPropertyChanged("EMAIL");
                this.OnEMAILChanged();
            }
        }
    }

    [Column(Storage = "_CITY", DbType = "NVarChar(50)")]
    public string CITY
    {
        get
        {
            return this._CITY;
        }
        set
        {
            if ((this._CITY != value))
            {
                this.OnCITYChanging(value);
                this.SendPropertyChanging();
                this._CITY = value;
                this.SendPropertyChanged("CITY");
                this.OnCITYChanged();
            }
        }
    }

    [Column(Storage = "_ZIP", DbType = "NVarChar(50)")]
    public string ZIP
    {
        get
        {
            return this._ZIP;
        }
        set
        {
            if ((this._ZIP != value))
            {
                this.OnZIPChanging(value);
                this.SendPropertyChanging();
                this._ZIP = value;
                this.SendPropertyChanged("ZIP");
                this.OnZIPChanged();
            }
        }
    }

    [Column(Storage = "_STATE", DbType = "NVarChar(50)")]
    public string STATE
    {
        get
        {
            return this._STATE;
        }
        set
        {
            if ((this._STATE != value))
            {
                this.OnSTATEChanging(value);
                this.SendPropertyChanging();
                this._STATE = value;
                this.SendPropertyChanged("STATE");
                this.OnSTATEChanged();
            }
        }
    }

    [Column(Storage = "_STREE_ADDR", DbType = "NVarChar(50)")]
    public string STREE_ADDR
    {
        get
        {
            return this._STREE_ADDR;
        }
        set
        {
            if ((this._STREE_ADDR != value))
            {
                this.OnSTREE_ADDRChanging(value);
                this.SendPropertyChanging();
                this._STREE_ADDR = value;
                this.SendPropertyChanged("STREE_ADDR");
                this.OnSTREE_ADDRChanged();
            }
        }
    }

    [Column(Storage = "_ROLE_TYPE_ID", DbType = "Int")]
    public System.Nullable<int> ROLE_TYPE_ID
    {
        get
        {
            return this._ROLE_TYPE_ID;
        }
        set
        {
            if ((this._ROLE_TYPE_ID != value))
            {
                if (this._ROLE_TYPES.HasLoadedOrAssignedValue)
                {
                    throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                }
                this.OnROLE_TYPE_IDChanging(value);
                this.SendPropertyChanging();
                this._ROLE_TYPE_ID = value;
                this.SendPropertyChanged("ROLE_TYPE_ID");
                this.OnROLE_TYPE_IDChanged();
            }
        }
    }

    [Column(Storage = "_SSN", DbType = "NVarChar(50)")]
    public string SSN
    {
        get
        {
            return this._SSN;
        }
        set
        {
            if ((this._SSN != value))
            {
                this.OnSSNChanging(value);
                this.SendPropertyChanging();
                this._SSN = value;
                this.SendPropertyChanged("SSN");
                this.OnSSNChanged();
            }
        }
    }

    [Column(Storage = "_ORI", DbType = "NVarChar(50)")]
    public string ORI
    {
        get
        {
            return this._ORI;
        }
        set
        {
            if ((this._ORI != value))
            {
                this.OnORIChanging(value);
                this.SendPropertyChanging();
                this._ORI = value;
                this.SendPropertyChanged("ORI");
                this.OnORIChanged();
            }
        }
    }

    [Column(Storage = "_MNEMONIC", DbType = "NVarChar(50)")]
    public string MNEMONIC
    {
        get
        {
            return this._MNEMONIC;
        }
        set
        {
            if ((this._MNEMONIC != value))
            {
                this.OnMNEMONICChanging(value);
                this.SendPropertyChanging();
                this._MNEMONIC = value;
                this.SendPropertyChanged("MNEMONIC");
                this.OnMNEMONICChanged();
            }
        }
    }

    [Column(Storage = "_DEVICEID", DbType = "NVarChar(50)")]
    public string DEVICEID
    {
        get
        {
            return this._DEVICEID;
        }
        set
        {
            if ((this._DEVICEID != value))
            {
                this.OnDEVICEIDChanging(value);
                this.SendPropertyChanging();
                this._DEVICEID = value;
                this.SendPropertyChanged("DEVICEID");
                this.OnDEVICEIDChanged();
            }
        }
    }

    [Column(Storage = "_AGENCY", DbType = "NVarChar(50)")]
    public string AGENCY
    {
        get
        {
            return this._AGENCY;
        }
        set
        {
            if ((this._AGENCY != value))
            {
                this.OnAGENCYChanging(value);
                this.SendPropertyChanging();
                this._AGENCY = value;
                this.SendPropertyChanged("AGENCY");
                this.OnAGENCYChanged();
            }
        }
    }

    [Column(Storage = "_STATUS", DbType = "NVarChar(50)")]
    public string STATUS
    {
        get
        {
            return this._STATUS;
        }
        set
        {
            if ((this._STATUS != value))
            {
                this.OnSTATUSChanging(value);
                this.SendPropertyChanging();
                this._STATUS = value;
                this.SendPropertyChanged("STATUS");
                this.OnSTATUSChanged();
            }
        }
    }

    [Column(Storage = "_ACCOUNT_LOCKED", DbType = "NVarChar(50)")]
    public string ACCOUNT_LOCKED
    {
        get
        {
            return this._ACCOUNT_LOCKED;
        }
        set
        {
            if ((this._ACCOUNT_LOCKED != value))
            {
                this.OnACCOUNT_LOCKEDChanging(value);
                this.SendPropertyChanging();
                this._ACCOUNT_LOCKED = value;
                this.SendPropertyChanged("ACCOUNT_LOCKED");
                this.OnACCOUNT_LOCKEDChanged();
            }
        }
    }

    [Association(Name = "FK_PLATES_USERS", Storage = "_PLATES", OtherKey = "USER_ID", DeleteRule = "NO ACTION")]
    public EntitySet<PLATES> PLATES
    {
        get
        {
            return this._PLATES;
        }
        set
        {
            this._PLATES.Assign(value);
        }
    }

    [Association(Name = "FK_USERS_ROLE_TYPES", Storage = "_ROLE_TYPES", ThisKey = "ROLE_TYPE_ID", IsForeignKey = true)]
    public ROLE_TYPES ROLE_TYPES
    {
        get
        {
            return this._ROLE_TYPES.Entity;
        }
        set
        {
            ROLE_TYPES previousValue = this._ROLE_TYPES.Entity;
            if (((previousValue != value)
                        || (this._ROLE_TYPES.HasLoadedOrAssignedValue == false)))
            {
                this.SendPropertyChanging();
                if ((previousValue != null))
                {
                    this._ROLE_TYPES.Entity = null;
                    previousValue.USERS.Remove(this);
                }
                this._ROLE_TYPES.Entity = value;
                if ((value != null))
                {
                    value.USERS.Add(this);
                    this._ROLE_TYPE_ID = value.ROLE_TYPE_ID;
                }
                else
                {
                    this._ROLE_TYPE_ID = default(Nullable<int>);
                }
                this.SendPropertyChanged("ROLE_TYPES");
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    private void attach_PLATES(PLATES entity)
    {
        this.SendPropertyChanging();
        entity.USERS = this;
    }

    private void detach_PLATES(PLATES entity)
    {
        this.SendPropertyChanging();
        entity.USERS = null;
    }
}
#pragma warning restore 1591
